import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('ðŸŒ± VeritabanÄ± seed iÅŸlemi baÅŸlÄ±yor...');

  // Demo tenant oluÅŸtur
  const tenant = await prisma.tenant.upsert({
    where: { slug: 'demo-company' },
    update: {},
    create: {
      name: 'Demo Åžirket A.Åž.',
      slug: 'demo-company',
      isActive: true,
    },
  });

  console.log('âœ… Demo tenant oluÅŸturuldu:', tenant.name);

  // Demo kullanÄ±cÄ±larÄ± oluÅŸtur
  const hashedPassword = await bcrypt.hash('123456', 12);

  const users = [
    {
      name: 'Ali YÄ±lmaz',
      email: 'ali@demo.com',
      role: 'OWNER',
      password: hashedPassword,
      tenantId: tenant.id,
      department: 'YÃ¶netim',
      position: 'Ä°ÅŸ Sahibi'
    },
    {
      name: 'Fatma Demir',
      email: 'fatma@demo.com',
      role: 'MANAGER',
      password: hashedPassword,
      tenantId: tenant.id,
      department: 'Ä°nÅŸaat',
      position: 'Proje MÃ¼dÃ¼rÃ¼'
    },
    {
      name: 'Mehmet Kaya',
      email: 'mehmet@demo.com',
      role: 'LEAD',
      password: hashedPassword,
      tenantId: tenant.id,
      department: 'Ä°nÅŸaat',
      position: 'Åžantiye Åžefi'
    },
    {
      name: 'AyÅŸe Åžahin',
      email: 'ayse@demo.com',
      role: 'WORKER',
      password: hashedPassword,
      tenantId: tenant.id,
      department: 'Ä°nÅŸaat',
      position: 'Ä°ÅŸÃ§i'
    },
    {
      name: 'Mustafa Ã–ztÃ¼rk',
      email: 'mustafa@demo.com',
      role: 'WORKER',
      password: hashedPassword,
      tenantId: tenant.id,
      department: 'Lojistik',
      position: 'Depo Sorumlusu'
    },
  ];

  for (const userData of users) {
    const user = await prisma.user.upsert({
      where: { 
        tenantId_email: { 
          tenantId: userData.tenantId, 
          email: userData.email 
        } 
      },
      update: {},
      create: userData,
    });
    console.log(`âœ… KullanÄ±cÄ± oluÅŸturuldu: ${user.name} (${user.role})`);
  }

  // Demo gÃ¶revleri oluÅŸtur
  const allUsers = await prisma.user.findMany({ where: { tenantId: tenant.id } });
  const owner = allUsers.find(u => u.role === 'OWNER');
  const manager = allUsers.find(u => u.role === 'MANAGER');
  const lead = allUsers.find(u => u.role === 'LEAD');
  const workers = allUsers.filter(u => u.role === 'WORKER');

  const tasks = [
    {
      title: 'Åžantiye gÃ¼venlik raporu hazÄ±rlama',
      description: 'HaftalÄ±k gÃ¼venlik kontrolÃ¼ yapÄ±lacak ve rapor hazÄ±rlanacak',
      priority: 'HIGH',
      status: 'OPEN',
      assignedById: owner!.id,
      assignedToId: manager!.id,
      tenantId: tenant.id,
      dueAt: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
      tags: ['gÃ¼venlik', 'rapor', 'haftalÄ±k']
    },
    {
      title: 'Malzeme sayÄ±mÄ± ve envanter gÃ¼ncelleme',
      description: 'Depo malzemelerinin sayÄ±mÄ± yapÄ±lacak',
      priority: 'MEDIUM',
      status: 'IN_PROGRESS',
      assignedById: manager!.id,
      assignedToId: lead!.id,
      tenantId: tenant.id,
      dueAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
      tags: ['envanter', 'sayÄ±m']
    },
    {
      title: 'GÃ¼nlÃ¼k temizlik kontrol',
      description: 'Ã‡alÄ±ÅŸma alanlarÄ±nÄ±n temizlik kontrolÃ¼',
      priority: 'LOW',
      status: 'DONE',
      assignedById: lead!.id,
      assignedToId: workers[0].id,
      tenantId: tenant.id,
      dueAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
      tags: ['temizlik', 'gÃ¼nlÃ¼k']
    },
    {
      title: 'HaftalÄ±k toplantÄ± hazÄ±rlÄ±ÄŸÄ±',
      description: 'Pazartesi gÃ¼nkÃ¼ haftalÄ±k deÄŸerlendirme toplantÄ±sÄ± iÃ§in sunum hazÄ±rlanacak',
      priority: 'URGENT',
      status: 'OPEN',
      assignedById: owner!.id,
      assignedToId: workers[1].id,
      tenantId: tenant.id,
      dueAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
      tags: ['toplantÄ±', 'sunum']
    },
  ];

  for (const taskData of tasks) {
    const task = await prisma.task.create({ data: taskData });
    console.log(`âœ… GÃ¶rev oluÅŸturuldu: ${task.title}`);
  }

  // Demo raporlarÄ± oluÅŸtur
  const reports = [
    {
      title: 'GÃ¼nlÃ¼k Vardiya Raporu - A Ekibi',
      body: 'BugÃ¼n toplam 8 iÅŸÃ§i ile Ã§alÄ±ÅŸÄ±ldÄ±. Ana yapÄ± inÅŸaatÄ±nda %15 ilerleme saÄŸlandÄ±. Herhangi bir gÃ¼venlik problemi yaÅŸanmadÄ±.',
      category: 'SHIFT',
      createdById: workers[0].id,
      tenantId: tenant.id,
      tags: ['vardiya', 'gÃ¼nlÃ¼k']
    },
    {
      title: 'Malzeme Teslimat Raporu',
      body: 'Ã‡imento ve demir Ã§ubuÄŸu teslimatÄ± tamamlandÄ±. Kalite kontrol geÃ§ti.',
      category: 'DELIVERY',
      createdById: lead!.id,
      tenantId: tenant.id,
      tags: ['teslimat', 'malzeme']
    },
    {
      title: 'GÃ¼venlik Kontrol Raporu',
      body: 'Åžantiye gÃ¼venlik ekipmanlarÄ± kontrol edildi. Eksik bulunan kasklar tamamlandÄ±.',
      category: 'INSPECTION',
      createdById: manager!.id,
      tenantId: tenant.id,
      tags: ['gÃ¼venlik', 'kontrol']
    },
  ];

  for (const reportData of reports) {
    const report = await prisma.report.create({ data: reportData });
    console.log(`âœ… Rapor oluÅŸturuldu: ${report.title}`);
  }

  // Demo chat oluÅŸtur
  const groupChat = await prisma.chat.create({
    data: {
      type: 'GROUP',
      name: 'Åžantiye A Ekibi',
      description: 'Ana ÅŸantiye ekibi genel sohbet',
      tenantId: tenant.id,
      createdById: manager!.id,
    }
  });

  // Chat Ã¼yeleri ekle
  const chatMembers = [manager!.id, lead!.id, ...workers.map(w => w.id)];
  for (const userId of chatMembers) {
    await prisma.chatMember.create({
      data: {
        chatId: groupChat.id,
        userId,
        canMessage: true,
      }
    });
  }

  // Demo mesajlar
  const messages = [
    {
      chatId: groupChat.id,
      senderId: manager!.id,
      body: 'GÃ¼naydÄ±n ekip! BugÃ¼nkÃ¼ hedeflerimizi gÃ¶zden geÃ§irelim.',
      createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000)
    },
    {
      chatId: groupChat.id,
      senderId: lead!.id,
      body: 'GÃ¼naydÄ±n! Malzeme sayÄ±mÄ± iÃ§in hazÄ±rÄ±m.',
      createdAt: new Date(Date.now() - 2.5 * 60 * 60 * 1000)
    },
    {
      chatId: groupChat.id,
      senderId: workers[0].id,
      body: 'Temizlik iÅŸleri tamamlandÄ±, raporu yÃ¼kledim.',
      createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
    },
    {
      chatId: groupChat.id,
      senderId: manager!.id,
      body: 'TeÅŸekkÃ¼rler! RaporlarÄ± kontrol ediyorum.',
      createdAt: new Date(Date.now() - 1.5 * 60 * 60 * 1000)
    },
  ];

  for (const messageData of messages) {
    await prisma.message.create({ data: messageData });
  }

  console.log('âœ… Demo chat ve mesajlar oluÅŸturuldu');

  console.log('ðŸŽ‰ Seed iÅŸlemi tamamlandÄ±!');
  console.log('');
  console.log('ðŸ“‹ Demo KullanÄ±cÄ±lar:');
  console.log('   OWNER:   ali@demo.com     / 123456');
  console.log('   MANAGER: fatma@demo.com   / 123456');
  console.log('   LEAD:    mehmet@demo.com  / 123456');
  console.log('   WORKER:  ayse@demo.com    / 123456');
  console.log('   WORKER:  mustafa@demo.com / 123456');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });